#!/bin/bash
set -e

SELFDIR=$(dirname "$0")
SELFDIR=$(cd "$SELFDIR" && pwd)
# shellcheck source=../lib/library.sh
source "$SELFDIR/../lib/library.sh"

require_envvar BINTRAY_ORG
require_envvar REPO_PACKAGE_VERSION


function list_deb_environments()
{
    grep -l 'apt install' /system/environments/*/Dockerfile |
        xargs -n 1 dirname |
        xargs -n 1 basename |
        grep -v utility
}

function upload()
{
    local REPO_DISTROS="$1"
    local REPO_ARCHS="$2"
    local REPO_OVERRIDE="$3"
    local PID="$$"
    local TRY_NUM=1
    local MAX_TRIES=3
    local -a CURL_COMMAND=(
        curl -sSL --netrc-file /tmp/curl-creds
        -w '%{http_code}' -o "/tmp/body-$PID.txt"
        -X PUT -T "$FILE"
        "https://bintray.com/api/v1/content/$BINTRAY_ORG/$REPO_NAME/fullstaq-ruby/$REPO_PACKAGE_VERSION/$BASENAME;deb_distribution=$REPO_DISTROS;deb_component=main;deb_architecture=$REPO_ARCHS;override=$REPO_OVERRIDE"
    )

    if $DRY_RUN; then
        echo "+ Dry-running: ${CURL_COMMAND[*]}"
        return 0
    fi

    while true; do
        echo "+ (Try $TRY_NUM/$MAX_TRIES) ${CURL_COMMAND[*]}"
        set +e
        HTTP_CODE=$("${CURL_COMMAND[@]}" 2>"/tmp/stderr-$PID.txt")
        local EXITSTATUS=$?
        set -e

        if [[ "$EXITSTATUS" = 0 ]]; then
            echo "HTTP response code: $HTTP_CODE"
            echo "HTTP body: $(cat /tmp/body-$$.txt)"
            cat /tmp/stderr-$PID.txt
            if [[ "$HTTP_CODE" =~ ^2 ]] || [[ "$HTTP_CODE" = 409 && "$IGNORE_EXISTING" = true ]]; then
                return 0
            else
                echo "${BOLD}${RED}*** ERROR DETECTED${RESET}"
                return 1
            fi
        else
            echo "${BOLD}${RED}CURL ERROR:${RESET} $(cat /tmp/stderr-$PID.txt)"
            (( TRY_NUM++ )) || true
            if [[ $TRY_NUM -gt $MAX_TRIES ]]; then
                return "$EXITSTATUS"
            else
                echo "${BOLD}${YELLOW}*** WARNING: command failed, retrying...${RESET}"
            fi
        fi
    done
}

REPO_NAME="$1"
FILE="$2"
BASENAME="$3"
REPUBLISH="$4"
IGNORE_EXISTING="$5"

# shellcheck disable=SC2207
ALL_SUPPORTED_DISTROS=($(list_deb_environments))
ALL_SUPPORTED_ARCHITECTURES=(amd64)

set -o pipefail

DEB_INFO=$(dpkg-deb -I "$FILE")

# shellcheck disable=SC2207
ARCHS=($(grep '^ Architecture:' <<<"$DEB_INFO" | perl -pe 's/.*?: *//'))
if [[ "${ARCHS[0]}" = all ]]; then
    ARCHS=("${ALL_SUPPORTED_ARCHITECTURES[@]}")
fi

if grep -q '^  Distribution:' <<<"$DEB_INFO"; then
    # shellcheck disable=SC2207
    DISTROS=($(grep '^  Distribution:' <<<"$DEB_INFO" | perl -pe 's/.*?: *//'))
else
    DISTROS=("${ALL_SUPPORTED_DISTROS[@]}")
fi

IFS=,
ARCHS_STRING="${ARCHS[*]}"
DISTROS_STRING="${DISTROS[*]}"
if $REPUBLISH || [[ "${#DISTROS[@]}" -gt 1 ]]; then
    # When we add an existing package to a new distribution,
    # we need to set override=1 in order to make it work.
    OVERRIDE=1
else
    OVERRIDE=0
fi
unset IFS

upload "$DISTROS_STRING" "$ARCHS_STRING" "$OVERRIDE"
