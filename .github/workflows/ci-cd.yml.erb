<%= editing_warning_comment %>

name: CI/CD

on:
  workflow_dispatch: {}
  push:
    paths-ignore:
      - '**.md'
      - 'dev-handbook/**'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'dev-handbook/**'

env:
  BINTRAY_ORG: fullstaq

jobs:
  check_workflow_uptodate:
    name: Check whether workflow is up-to-date
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'

      - name: Check
        run: ./internal-scripts/ci-cd/check-workflow-uptodate/check.sh
      - name: Show differences
        run: git diff --no-index --color .github/workflows/ci-cd.yml .github/workflows/ci-cd.yml.2
        if: '!cancelled() && failure()'


  check_version_numbers_need_bumping:
    name: Check whether any version numbers need to be changed
    needs: download_rbenv_source
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - name: Fetch Rbenv source
        uses: actions/download-artifact@v1
        with:
          name: rbenv-src
          path: .

      - name: Extract Rbenv source
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/extract-rbenv-source.sh
      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh

      - name: Check whether the Rbenv version in config.yml is correct
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/check-rbenv-version.sh
        if: '!cancelled()'
      - name: Check whether the Rbenv package revision needs to be changed
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/check-rbenv-package-revision.sh
        if: '!cancelled()'

      - name: Check whether the fullstaq-ruby-common Debian package version or revision needs to be changed
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/check-common-deb-version-revision.sh
        if: '!cancelled()'
      - name: Check whether the fullstaq-ruby-common RPM package version or revision needs to be changed
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/check-common-rpm-version-revision.sh
        if: '!cancelled()'

      - name: Check whether any Ruby package revisions need to be changed
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/check-ruby-package-revisions.sh
        if: '!cancelled()'

      - name: Check whether any minor Ruby package revisions need to be changed
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/check-minor-ruby-package-revisions.sh
        if: '!cancelled()'


  # Determines which jobs should be run, or (in case this is a re-run)
  # which jobs can be skipped this time because the last run succeeded.
  # We determine this by checking whether the artifacts produced by jobs
  # exist in this run.
  determine_necessary_jobs:
    name: Determine necessary jobs
    runs-on: ubuntu-20.04
    outputs:
      <%- docker_images.each do |image| %>
      <%- unindent(2) do -%>
        'image-<%= slug(image[:id]) %>-needs-building': '${{ steps.prepare_image_<%= slug(image[:id]) %>.outputs.needs-building }}'
      <%- end -%>
      <%- end %>
    steps:
      - uses: actions/checkout@v2

      <%- docker_images.each do |image| %>
      <%- unindent(2) do -%>
        - name: Determine whether Docker image for <%= image[:id] %> needs to be built
          id: 'prepare_image_<%= slug(image[:id]) %>'
          run: ./internal-scripts/ci-cd/build-docker-images/prepare.sh
          env:
            IMAGE_NAME: '<%= image[:name] %>'
            IMAGE_TAG: '<%= image[:tag] %>'
      <%- end -%>
      <%- end %>


  ### Docker images ###

  <%- docker_images.each do |image| %>
  <%- unindent(2) do -%>
    build_docker_image_<%= slug(image[:id]) %>:
      name: 'Build Docker image [<%= image[:id] %>]'
      runs-on: ubuntu-18.04
      needs: determine_necessary_jobs
      if: needs.determine_necessary_jobs.outputs.image-<%= slug(image[:id]) %>-needs-building == 'true'
      steps:
        - uses: actions/checkout@v2

        - name: Prepare
          run: ./internal-scripts/ci-cd/build-docker-images/prepare.sh
          env:
            IMAGE_NAME: '<%= image[:name] %>'
            IMAGE_TAG: '<%= image[:tag] %>'

        - name: Build
          run: ./internal-scripts/ci-cd/build-docker-images/build.sh
          env:
            IMAGE_NAME: '<%= image[:name] %>'
            IMAGE_TAG: '<%= image[:tag] %>'
            SOURCE_DIR: 'environments/<%= image[:id] %>'

        - name: Dump image
          run: ./internal-scripts/ci-cd/build-docker-images/dump-image.sh
          env:
            IMAGE_NAME: '<%= image[:name] %>'
            IMAGE_TAG: '<%= image[:tag] %>'
        - name: Archive artifact
          uses: actions/upload-artifact@v1
          with:
            name: 'docker-image-<%= image[:id] %>'
            path: output
  <%- end %>
  <%- end %>


  ### Sources ###

  download_ruby_sources:
    name: Download Ruby sources
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        ruby_version: <%=indentyaml ruby_source_versions %>
    steps:
      - name: Fetch cache
        id: fetch_cache
        uses: actions/cache@v1
        with:
          path: output
          key: v3-ruby-src-${{ matrix.ruby_version }}

      - uses: actions/checkout@v2
        if: steps.fetch_cache.outputs.cache-hit != 'true'
      - name: Download
        run: ./internal-scripts/ci-cd/download-ruby-sources/download.sh
        if: steps.fetch_cache.outputs.cache-hit != 'true'
        env:
          RUBY_VERSION: ${{ matrix.ruby_version }}

      - name: Archive artifact
        uses: actions/upload-artifact@v1
        with:
          name: ruby-src-${{ matrix.ruby_version }}
          path: output


  download_rbenv_source:
    name: Download Rbenv source
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'
      - name: Prepare
        id: prepare
        run: ./internal-scripts/ci-cd/download-rbenv-source/prepare.sh
      - name: Fetch cache
        uses: actions/cache@v1
        with:
          path: output
          key: v2-rbenv-src-${{ steps.prepare.outputs.cache_key }}

      - name: Download
        run: ./internal-scripts/ci-cd/download-rbenv-source/download.sh
        env:
          RBENV_REPO_URL: ${{ steps.prepare.outputs.repo_url }}
          RBENV_REPO_REF: ${{ steps.prepare.outputs.ref }}

      - name: Archive artifact
        uses: actions/upload-artifact@v1
        with:
          name: rbenv-src
          path: output


  ### Jemalloc ###

  <%- distributions.each do |distribution| %>
  <%- unindent(2) do -%>
    build_jemalloc_binary_<%= slug(distribution[:name]) %>:
      name: 'Build Jemalloc binary [<%= distribution[:name] %>]'
      needs:
        - 'determine_necessary_jobs'
        - 'build_docker_image_<%= slug(distribution[:name]) %>'
      runs-on: ubuntu-18.04
      # Run even if a dependent job has been skipped
      if: '!failure() && !cancelled()'
      steps:
        - uses: actions/checkout@v2
        - name: Fetch cache
          uses: actions/cache@v1
          with:
            path: cache
            key: 'jemalloc-bin-<%= distribution[:name] %>-<%= jemalloc_version %>'
        - name: Create cache dir
          run: mkdir -p cache

        - name: Download Docker image necessary for building
          uses: actions/download-artifact@v1
          if: "needs.determine_necessary_jobs.outputs.image-<%= slug(distribution[:name]) %>-needs-building == 'true'"
          with:
            name: 'docker-image-<%= distribution[:name] %>'
            path: .
        - name: Load Docker image necessary for building
          run: ./internal-scripts/ci-cd/load-docker-image.sh
          if: "needs.determine_necessary_jobs.outputs.image-<%= slug(distribution[:name]) %>-needs-building == 'true'"
          env:
            TARBALL: image.tar.zst

        - name: Download source
          run: ./internal-scripts/ci-cd/build-jemalloc-binaries/download-source.sh
          env:
            JEMALLOC_VERSION: "<%= jemalloc_version %>"

        - name: Build
          run: ./internal-scripts/ci-cd/build-jemalloc-binaries/build.sh
          env:
            ENVIRONMENT_NAME: '<%= distribution[:name] %>'

        - name: Archive artifact
          uses: actions/upload-artifact@v1
          with:
            name: 'jemalloc-bin-<%= distribution[:name] %>'
            path: output
  <%- end -%>
  <%- end %>


  ### fullstaq-ruby-common ###

  build_common_deb:
    name: Build common DEB
    needs:
      - determine_necessary_jobs
      - build_docker_image_utility
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    steps:
      - uses: actions/checkout@v2

      - name: Download utility Docker image
        uses: actions/download-artifact@v1
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Build package
        run: ./internal-scripts/ci-cd/build-common-deb/build-package.sh
        env:
          PACKAGE_BASENAME: "<%= common_package_basename(:DEB) %>"
          VERSION: "<%= common_deb_version %>"
          REVISION: "<%= common_deb_package_revision %>"

      - name: Archive artifact
        uses: actions/upload-artifact@v1
        with:
          name: common-deb
          path: output


  build_common_rpm:
    name: Build common RPM
    needs:
      - determine_necessary_jobs
      - build_docker_image_utility
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    steps:
      - uses: actions/checkout@v2

      - name: Download utility Docker image
        uses: actions/download-artifact@v1
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Build package
        run: ./internal-scripts/ci-cd/build-common-rpm/build-package.sh
        env:
          PACKAGE_BASENAME: "<%= common_package_basename(:RPM) %>"
          VERSION: "<%= common_rpm_version %>"
          REVISION: "<%= common_rpm_package_revision %>"

      - name: Archive artifact
        uses: actions/upload-artifact@v1
        with:
          name: common-rpm
          path: output


  ### Rbenv ###

  build_rbenv_deb:
    name: Build Rbenv DEB
    needs:
      - determine_necessary_jobs
      - download_rbenv_source
      - build_docker_image_utility
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    steps:
      - uses: actions/checkout@v2
      - name: Fetch Rbenv source
        uses: actions/download-artifact@v1
        with:
          name: rbenv-src
          path: .

      - name: Download utility Docker image
        uses: actions/download-artifact@v1
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Build package
        run: ./internal-scripts/ci-cd/build-rbenv-deb/build-package.sh
        env:
          PACKAGE_BASENAME: "<%= rbenv_package_basename(:DEB) %>"
          REVISION: "<%= rbenv_package_revision %>"

      - name: Archive artifact
        uses: actions/upload-artifact@v1
        with:
          name: rbenv-deb
          path: output


  build_rbenv_rpm:
    name: Build Rbenv RPM
    needs:
      - determine_necessary_jobs
      - download_rbenv_source
      - build_docker_image_utility
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    steps:
      - uses: actions/checkout@v2
      - name: Fetch Rbenv source
        uses: actions/download-artifact@v1
        with:
          name: rbenv-src
          path: .

      - name: Download utility Docker image
        uses: actions/download-artifact@v1
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Build package
        run: ./internal-scripts/ci-cd/build-rbenv-rpm/build-package.sh
        env:
          PACKAGE_BASENAME: "<%= rbenv_package_basename(:RPM) %>"
          REVISION: "<%= rbenv_package_revision %>"

      - name: Archive artifact
        uses: actions/upload-artifact@v1
        with:
          name: rbenv-rpm
          path: output


  ### Ruby ###

  <%- distributions.each do |distribution| %>
  <%- unindent(2) do %>
    build_ruby_packages_<%= slug(distribution[:name]) %>:
      name: 'Build Ruby packages [<%= distribution[:name] %>]'
      needs:
        - 'determine_necessary_jobs'
        - 'download_ruby_sources'
        - 'build_jemalloc_binary_<%= slug(distribution[:name]) %>'
        - 'build_docker_image_<%= slug(distribution[:name]) %>'
        - 'build_docker_image_utility'
      runs-on: ubuntu-18.04
      # Run even if a dependent job has been skipped
      if: '!failure() && !cancelled()'
      strategy:
        matrix:
          ruby_package_version: <%=indentyaml ruby_package_versions %>
          variant: <%=indentyaml variants %>
      steps:
        - uses: actions/checkout@v2

        - name: Fetch Ruby source
          uses: actions/download-artifact@v1
          with:
            name: ruby-src-${{ matrix.ruby_package_version.full_version }}
            path: .
        - name: Fetch Jemalloc binary
          uses: actions/download-artifact@v1
          with:
            name: jemalloc-bin-<%= distribution[:name] %>
            path: .
          if: matrix.variant.name == 'jemalloc'
        - name: Fetch cache
          uses: actions/cache@v1
          with:
            path: cache
            key: ruby-bin-${{ matrix.ruby_package_version.id }}-<%= distribution[:name] %>-${{ matrix.variant.name }}
        - name: Create cache dir
          run: mkdir -p cache

        - name: Download Docker image necessary for building
          uses: actions/download-artifact@v1
          if: "needs.determine_necessary_jobs.outputs.image-<%= slug(distribution[:name]) %>-needs-building == 'true'"
          with:
            name: 'docker-image-<%= distribution[:name] %>'
            path: .
        - name: Load Docker image necessary for building
          run: ./internal-scripts/ci-cd/load-docker-image.sh
          if: "needs.determine_necessary_jobs.outputs.image-<%= slug(distribution[:name]) %>-needs-building == 'true'"
          env:
            TARBALL: image.tar.zst
        - name: Build binaries
          run: ./internal-scripts/ci-cd/build-ruby-packages/build-binaries.sh
          env:
            ENVIRONMENT_NAME: "<%= distribution[:name] %>"
            VARIANT_NAME: ${{ matrix.variant.name }}
            RUBY_PACKAGE_VERSION_ID: ${{ matrix.ruby_package_version.id }}

        - name: Download Docker image necessary for packaging
          uses: actions/download-artifact@v1
          if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
          with:
            name: 'docker-image-<%= distribution[:name] %>'
            path: .
        - name: Load Docker image necessary for packaging
          run: ./internal-scripts/ci-cd/load-docker-image.sh
          if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
          env:
            TARBALL: image.tar.zst
        - name: Build package
          run: ./internal-scripts/ci-cd/build-ruby-packages/build-package.sh
          env:
            DISTRIBUTION_NAME: "<%= distribution[:name] %>"
            VARIANT_NAME: ${{ matrix.variant.name }}
            VARIANT_PACKAGE_SUFFIX: ${{ matrix.variant.package_suffix }}
            PACKAGE_FORMAT: "<%= distribution[:package_format] %>"
            RUBY_PACKAGE_VERSION_ID: ${{ matrix.ruby_package_version.id }}
            RUBY_PACKAGE_REVISION: ${{ matrix.ruby_package_version.package_revision }}

        - name: Archive package artifact
          uses: actions/upload-artifact@v1
          with:
            name: ruby-pkg_${{ matrix.ruby_package_version.id }}_<%= distribution[:name] %>_${{ matrix.variant.name }}
            path: output
  <%- end %>
  <%- end %>


  ### Create test APT/YUM repos ###

  create_test_apt_repo:
    name: Create test APT repo
    runs-on: ubuntu-18.04
    needs:
      - check_workflow_uptodate
      - check_version_numbers_need_bumping
    steps:
      - uses: actions/checkout@v2
      - name: Recreate repo
        run: ./internal-scripts/ci-cd/publish/recreate-apt-repo.sh
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-apt-ci-${{ github.run_number }}


  create_test_yum_repo:
    name: Create test YUM repo
    needs:
      - check_workflow_uptodate
      - check_version_numbers_need_bumping
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Recreate repo
        run: ./internal-scripts/ci-cd/publish/recreate-yum-repo.sh
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-yum-ci-${{ github.run_number }}


  ### Publish common and fullstaq-rbenv packages to test repos

  publish_common_and_rbenv_debs_test:
    name: Publish common and Rbenv DEBs to test repo
    needs:
      - determine_necessary_jobs
      - build_docker_image_utility
      - create_test_apt_repo
      - build_common_deb
      - build_rbenv_deb
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: common-deb
          path: .
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: rbenv-deb
          path: .

      - name: Download utility Docker image
        uses: actions/download-artifact@v1
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh
      - name: Determine Bintray repository package version
        # Sets environment variable $REPO_PACKAGE_VERSION
        run: ./internal-scripts/ci-cd/publish/determine-repo-package-version.sh

      - name: Upload to repo
        run: ./internal-scripts/ci-cd/publish/publish-debs.sh *.deb
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-apt-ci-${{ github.run_number }}
          DRY_RUN: false
          IGNORE_EXISTING: false


  publish_common_and_rbenv_rpms_test:
    name: Publish common and Rbenv RPMs to test repo
    needs:
      - determine_necessary_jobs
      - build_docker_image_utility
      - create_test_yum_repo
      - build_common_rpm
      - build_rbenv_rpm
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: common-rpm
          path: .
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: rbenv-rpm
          path: .

      - name: Download utility Docker image
        uses: actions/download-artifact@v1
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load utility Docker image
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh
      - name: Determine Bintray repository package version
        # Sets environment variable $REPO_PACKAGE_VERSION
        run: ./internal-scripts/ci-cd/publish/determine-repo-package-version.sh

      - name: Upload to repo
        run: ./internal-scripts/ci-cd/publish/publish-rpms.sh *.rpm
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-yum-ci-${{ github.run_number }}
          DRY_RUN: false
          IGNORE_EXISTING: false


  ### Publish Ruby packages to test repos

  publish_ruby_packages_test:
    name: Publish Ruby packages to test repo
    needs:
      - determine_necessary_jobs
      - build_docker_image_utility
      - create_test_apt_repo
      - create_test_yum_repo
      - build_common_deb
      - build_rbenv_deb
      - build_common_rpm
      - build_rbenv_rpm
      <%- distributions.each do |distribution| -%>
      - build_ruby_packages_<%= slug(distribution[:name]) %>
      <%- end -%>
    runs-on: ubuntu-18.04
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      <%- ruby_package_artifact_names.each do |artifact_name| %>
      <%- unindent(2) do -%>
        - name: Fetch <%= artifact_name %>
          uses: actions/download-artifact@v1
          with:
            name: <%= artifact_name %>
            path: ruby-pkgs
      <%- end -%>
      <%- end %>

      - name: Download Docker image necessary for testing
        uses: actions/download-artifact@v1
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load Docker image necessary for testing
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh
      - name: Determine Bintray repository package version
        # Sets environment variable $REPO_PACKAGE_VERSION
        run: ./internal-scripts/ci-cd/publish/determine-repo-package-version.sh

      - name: Upload DEBs to repo
        run: ./internal-scripts/ci-cd/publish/publish-debs.sh ruby-pkgs/*.deb
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-apt-ci-${{ github.run_number }}
          DRY_RUN: false
          IGNORE_EXISTING: false
      - name: Upload RPMs to repo
        run: ./internal-scripts/ci-cd/publish/publish-rpms.sh ruby-pkgs/*.rpm
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-yum-ci-${{ github.run_number }}
          DRY_RUN: false
          IGNORE_EXISTING: false

  commit_published_packages_test:
    name: Commit packages published to test repo
    needs:
      - publish_common_and_rbenv_debs_test
      - publish_common_and_rbenv_rpms_test
      - publish_ruby_packages_test
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh
      - name: Determine Bintray repository package version
        # Sets environment variable $REPO_PACKAGE_VERSION
        run: ./internal-scripts/ci-cd/publish/determine-repo-package-version.sh

      - name: Commit files published to APT repo
        run: ./internal-scripts/ci-cd/publish/commit-published-packages.sh
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-apt-ci-${{ github.run_number }}

      - name: Commit files published to YUM repo
        run: ./internal-scripts/ci-cd/publish/commit-published-packages.sh
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-yum-ci-${{ github.run_number }}


  ### Test packages against test repos ###

  # The Github Actions matrix is limited to producing 256 jobs. Given the
  # combinatorial explosion, it's very easy to reach that limit, so we
  # preprocess distribution information using ERB templating instead.
  <%- distributions_with_test_image_info.each do |distribution| %>
  <%- unindent(2) do %>
    test_packages_against_test_<%= slug(distribution[:name]) %>:
      name: 'Test Ruby packages against test repos [<%= distribution[:name] %>]'
      needs: commit_published_packages_test
      runs-on: ubuntu-18.04
      strategy:
        max-parallel: 4 # avoid overloading Bintray
        matrix:
          ruby_package_version: <%=indentyaml ruby_package_versions %>
          variant: <%=indentyaml variants %>
      steps:
        - uses: actions/checkout@v2
        - name: Run tests
          run: ./internal-scripts/ci-cd/test-packages/run-tests.sh
          env:
            DISTRIBUTION_NAME: "<%= distribution[:name] %>"
            RUBY_PACKAGE_ID: ${{ matrix.ruby_package_version.id }}
            PACKAGE_FORMAT: "<%= distribution[:package_format] %>"
            VARIANT_NAME: ${{ matrix.variant.name }}
            VARIANT_PACKAGE_SUFFIX: ${{ matrix.variant.package_suffix }}
            TEST_IMAGE_NAME: "<%= distribution[:test_image] %>"
            APT_REPO_URL: https://dl.bintray.com/fullstaq/fullstaq-ruby-apt-ci-${{ github.run_number }}
            YUM_REPO_URL: https://dl.bintray.com/fullstaq/fullstaq-ruby-yum-ci-${{ github.run_number }}
  <%- end %>
  <%- end %>

  ### Publish packages to production repo ###

  publish_packages_production:
    name: Publish packages to production repos
    needs:
      - determine_necessary_jobs
      <%- distributions.each do |distribution| -%>
      - 'test_packages_against_test_<%= slug(distribution[:name]) %>'
      <%- end -%>
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download fullstaq-common DEB
        uses: actions/download-artifact@v1
        with:
          name: common-deb
          path: .
      - name: Download fullstaq-common RPM
        uses: actions/download-artifact@v1
        with:
          name: common-rpm
          path: .
      - name: Download Rbenv DEB
        uses: actions/download-artifact@v1
        with:
          name: rbenv-deb
          path: .
      - name: Download Rbenv RPM
        uses: actions/download-artifact@v1
        with:
          name: rbenv-rpm
          path: .

      <%- ruby_package_artifact_names.each do |artifact_name| %>
      <%- unindent(2) do -%>
        - name: Fetch <%= artifact_name %>
          uses: actions/download-artifact@v1
          with:
            name: <%= artifact_name %>
            path: .
      <%- end -%>
      <%- end %>

      - name: Download Docker image necessary for publishing
        uses: actions/download-artifact@v1
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        with:
          name: docker-image-utility
          path: .
      - name: Load Docker image necessary for publishing
        run: ./internal-scripts/ci-cd/load-docker-image.sh
        if: "needs.determine_necessary_jobs.outputs.image-utility-needs-building == 'true'"
        env:
          TARBALL: image.tar.zst

      - name: Determine latest release tag
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh
      - name: Determine Bintray repository package version
        # Sets environment variable $REPO_PACKAGE_VERSION
        run: ./internal-scripts/ci-cd/publish/determine-repo-package-version.sh

      - name: Upload DEBs to repo
        run: ./internal-scripts/ci-cd/publish/publish-debs.sh *.deb
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-apt
          DRY_RUN: ${{ github.ref != 'refs/heads/main' }}
          IGNORE_EXISTING: true

      - name: Commit files published to APT repo
        run: ./internal-scripts/ci-cd/publish/commit-published-packages.sh
        if: github.ref == 'refs/heads/main'
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-apt

      - name: Upload RPMs to repo
        run: ./internal-scripts/ci-cd/publish/publish-rpms.sh *.rpm
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-yum
          DRY_RUN: ${{ github.ref != 'refs/heads/main' }}
          IGNORE_EXISTING: true

      - name: Commit files published to YUM repo
        run: ./internal-scripts/ci-cd/publish/commit-published-packages.sh
        if: github.ref == 'refs/heads/main'
        env:
          BINTRAY_API_USERNAME: ${{ secrets.BINTRAY_API_USERNAME }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          REPO_NAME: fullstaq-ruby-yum


  ### Test packages against production repos ###

  # The Github Actions matrix is limited to producing 256 jobs. Given the
  # combinatorial explosion, it's very easy to reach that limit, so we
  # preprocess distribution information using ERB templating instead.
  <%- distributions_with_test_image_info.each do |distribution| %>
  <%- unindent(2) do -%>
    test_packages_against_production_<%= slug(distribution[:name]) %>:
      name: 'Test Ruby packages against production repos [<%= distribution[:name] %>]'
      needs: publish_packages_production
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-18.04
      strategy:
        max-parallel: 4 # avoid overloading Bintray
        matrix:
          ruby_package_version: <%=indentyaml ruby_package_versions %>
          variant: <%=indentyaml variants %>
      steps:
        - uses: actions/checkout@v2
        - name: Run tests
          run: ./internal-scripts/ci-cd/test-packages/run-tests.sh
          env:
            DISTRIBUTION_NAME: "<%= distribution[:name] %>"
            RUBY_PACKAGE_ID: ${{ matrix.ruby_package_version.id }}
            PACKAGE_FORMAT: "<%= distribution[:package_format] %>"
            VARIANT_NAME: ${{ matrix.variant.name }}
            VARIANT_PACKAGE_SUFFIX: ${{ matrix.variant.package_suffix }}
            TEST_IMAGE_NAME: "<%= distribution[:test_image] %>"
            APT_REPO_URL: https://apt.fullstaqruby.org
            YUM_REPO_URL: https://yum.fullstaqruby.org
  <%- end %>
  <%- end %>


  ### Create Git tag ###

  create_git_tag:
    name: Create Git tag
    needs:
      <%- distributions.each do |distribution| -%>
      - 'test_packages_against_production_<%= slug(distribution[:name]) %>'
      <%- end -%>
    # Run even if a dependent job has been skipped
    if: '!failure() && !cancelled()'
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'

      - name: Determine latest release version
        # Sets environment variable $LATEST_RELEASE_TAG
        run: ./internal-scripts/ci-cd/check-version-numbers-need-changing/determine-latest-release-tag.sh

      - name: Determine next epic version
        # Sets environment variable $NEXT_RELEASE_VERSION
        run: ./internal-scripts/ci-cd/create-git-tag/determine-next-epic-version.sh

      - name: Create Git tag
        run: git tag epic-${{ env.NEXT_RELEASE_VERSION }}

      - name: Push Git tag
        if: github.ref == 'refs/heads/main'
        run: git push origin epic-${{ env.NEXT_RELEASE_VERSION }}
